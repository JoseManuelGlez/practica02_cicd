pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'node-hello-world'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    docker.build('node-hello-world')
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    docker.image('node-hello-world').inside {
                        withEnv(["NPM_CONFIG_CACHE=/tmp/.npm-cache"]) {
                            sh '''
                                mkdir -p /tmp/.npm-cache
                                chown -R $(id -u):$(id -g) /tmp/.npm-cache
                                npm install --cache /tmp/.npm-cache
                                npm test --cache /tmp/.npm-cache
                            '''
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // Detener y eliminar contenedores antiguos
                    def CONTAINER_IDS = sh(script: "docker ps -q --filter 'ancestor=${node-hello-world}'", returnStdout: true).trim()
                    if (CONTAINER_IDS) {
                        sh "docker stop $CONTAINER_IDS"
                        sh "docker rm $CONTAINER_IDS"
                    } else {
                        echo "No running containers found for image ${node-hello-world}"
                    }

                    // Construir la nueva imagen
                    sh "docker build -t ${node-hello-world} ."

                    // Iniciar un nuevo contenedor
                    sh "docker run -d -p 3000:3000 --name ${node-hello-world}-container ${node-hello-world}"
                }
            }
        }
    }
}
